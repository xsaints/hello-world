#!/bin/bash
#!/usr/bin/env bash
#/***************************************************************************************/
#/* PVCS: $Header:   D:/EFS_SYSTEMS/archives/BIN/FTPCON.-arc   1.10   Oct 17 2016 11:24:12   venturaj  $                                              */
#/***************************************************************************************/
#--
#-- Name :             ${CINT_TOP}/bin/FTPCON 
#-- 
#-- Function :         Move files from and to Environments using FTP 
#--
#-- Author:             J. S. Buchan, Oracle Services  
#--                   (c) Copyright 1994, Oracle Corporation 
#--                   (c) Copyright 1996, Oracle Corporation
#--                      Migrated from 10.7 to 11i August 15, 2001 by A.Van Skiver
#--
#-- Date:               November 22, 1994 
#--
#-- Parameters used:  None
#--
#-- Called by :       None
#--
#--
#-- Calls :             None
#--
#-- Logfile :           None
#-----------------------------------------------------------------------------------------
#
#-- Revision History:
#-- $#Log:   D:/EFS_SYSTEMS/archives/BIN/FTPCON.-arc  $

#--Rev 1.6   Apr 16 2014 12:42:48   qamarr script was giving error on uncommented 'CRQ81058' header section

#--   Rev 1.5   Apr 07 2014 09:18:22   degalah
#-- CRQ81058

#   Rev 1.2   Dec 10 2013 17:49:50   klimekk
#removing hardcoded wrong dir path in error_exit
#
#   Rev 1.5   Oct 21 2008 10:32:36   hoodj
#Port change from 21 to 22 (SFTP)
#
#  Rev 1.4   Feb 06 2002 16:14:26   TANASICT
# Made changes to conditionally change directories to Oracle if the connection is NOT to PeopleSoft (gumley or bascaby).  This is required because the PeopleSoft directory structure is missing the Oracle directory.
#
# Made changes to activate the FEED_SUFFIX parameter and to only bring over those files with that suffix (was bringing over everything found in the directory.
#
# Made changes to preserve the file extension case (was setting the extensions to uppercase)
#
#   Rev 1.3   Nov 09 2001 12:41:40   SUDYKA
# Fixed keywords
#-----------------------------------------------------------------------------------------
#
#-- Warnings .......: Note Multi $MACHNAM support added for outbound as 
#--                   a result all outbound files now must be masked as: 
#--                   ${CINT_TOP}/outbound/${MACHNAM}.fname 
#-- 
#--                   i.e.   
#--                   /u23/oracle/capproot_10.6/int/1.0.0/outbound/MVS2.V1003.JNN 
#-- 
#-- Comments .......: Non-SRS execution is not support in this release 
#--                   Diagnostic mailto not supported in this release 
#-- 
#--                   May still be an issue with /tmp/ files not being 
#--                  cleaned up in 3.3.0 
#-- 
#--                   May still add: 
#-- 
#--                      check that directories are all in remote and 
#--                       destination 
#-- 
#--                       machnam is know, but is offline 
#--                       this will cause a hang, need to spawn, time and 
#--                       timeout spawns with errors.  Issue with NT3/NT4 
#-- 
#--                   Related to NFSCON and RCPCON 
#-- 
#--  215 NetWare system type. 
#/************************************************************************************/
 
base_version=4.2                # < -- Do not modify used by PVCS 
site_version=1.1 
 
 
# 
# --> Setup environment  (defaults) 
 
MAILTO=${LOGNAME}               # who to we mail logs to 
 
export MAILTO 
 
 
HL_QUALIFIER="PROD"     ;export HL_QUALIFIER 
 
 
 
# 
# <-------------------------- Crystalize Passed Arguments --------------------> 
#  
 
args=$# 
num_args=$# 
in_args=${@} 
  
# 
# <-------------------------- Setup local Functions --------------------------> 
#  
# ......................................................................... 
# 
# --> FUNCTION: msg handler  
# 
 
msg () 
{ 
if [ "$#" = "1" ] 
then 
  if [ "${RUN_MODE}" = "SRS" ] 
  then  
    echo -e ${1} 
  else 
    cat ${1} >> /tmp/$$.run.log 2> /dev/null 
  fi 
else 
  if [ "${diagnostic}" = "detail" ] 
  then 
    if [ "${RUN_MODE}" = "SRS" ] 
    then  
      echo -e ${1} 
    else 
      cat ${1} >> /tmp/$$.run.log 2>/dev/null 
    fi 
  fi 
fi 
} 
 
# ......................................................................... 
# 
# --> FUNCTION: msg handler, files to cat  
 
cat_msg () 
{ 
if [ "$#" = "1" ] 
then 
  if [ "${RUN_MODE}" = "SRS" ] 
  then  
    awk '{print $(NF)}' ${1}|cat  2>/dev/null 
  else 
    cat ${1} >> /tmp/$$.run.log 2>/dev/null 
  fi 
else 
  if [ "${diagnostic}" = "detail" ] 
  then 
    if [ "${RUN_MODE}" = "SRS" ] 
    then  
      cat ${1} 2>/dev/null 
    else 
      cat ${1} >> /tmp/$$.run.log 2>/dev/null 
    fi 
  fi 
fi 
} 
 
# ......................................................................... 
# 
# --> FUNCTION: Error Exit 
# 
 
error_exit () 
{ 
  msg "\n--> Error Exit \n" 
  msg "-----------------------------------------------------------" -d 
  msg "Printing log files: " -d 
  msg "" -d 
  msg "-- $$.FTPCON.out.stream.tmp" -d  
  cp /tmp/$$.FTPCON.tmp $APPLCSF/$APPLLOG/FTPCON.log
  cat_msg /tmp/$$.FTPCON.out.stream.tmp -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.out.stream.tmp.log" -d 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.target.tmp" -d 
  cat_msg /tmp/$$.FTPCON.target.tmp -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.tmp" -d 
  cat_msg /tmp/$$.FTPCON.tmp -d 
  msg "-----------------------------------------------------------" -d 
  msg "\n\nTHIS CONNECTION TO ${STYLE}, and MOVE -- FAILED -- \n" 
  msg "--> Removing files, cleaning up\n">> /tmp/$$.run.log 
 
if [ "${RUN_MODE}" = "SRS" ] 
then 
: 
else 
  if [ "${MAILTO}" != "" ] 
  then 
    mailx -s"**Int File(s) Detected" `echo ${MAILTO}` < /tmp/$$.run.log 
  fi  
fi 
clean_up 
exit 1 
} 
 
 
 
# ......................................................................... 
# 
# --> FUNCTION: Normal Exit 
# 
 
normal_exit () 
{ 
  msg "\n--> Normal Exit \n" 
  msg "-----------------------------------------------------------" -d 
  msg "Printing log files: " -d 
  msg "" -d 
  msg "-- $$.FTPCON.out.stream.tmp" -d  
  cat_msg /tmp/$$.FTPCON.out.stream.tmp -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.out.stream.tmp.log" -d 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.target.tmp" -d 
  cat_msg /tmp/$$.FTPCON.target.tmp -d 
  msg "   ......................................................" -d 
  msg "-- $$.FTPCON.tmp" -d 
  cat_msg /tmp/$$.FTPCON.tmp -d 
  msg "-----------------------------------------------------------" -d 
  msg "\n\nTHIS CONNECTION TO/FROM ${STYLE} and LOAD IS - OK" 
  msg "\n\nHave a GREAT day!\n\n" 
 
if [ "${RUN_MODE}" = "SRS" ] 
then 
 : 
else 
  if [ "${MAILTO}" != "" ] 
  then 
    mailx -s"**Int File(s) Detected" `echo ${MAILTO}` < /tmp/$$.run.log 
  fi  
fi 
clean_up 
} 
# ......................................................................... 
# 
# --> FUNCTION: Clean up 
# 
 
clean_up ()  
{ 
  msg "--> Not Removing files, cleaning up\n" 
  rm /tmp/$$.FTPCON.out.stream.tmp 2>/dev/null 
  rm /tmp/$$.FTPCON.out.stream.tmp.log 2>/dev/null 
  rm /tmp/$$.FTPCON.target.tmp 2>/dev/null 
  rm /tmp/$$.run.log 2>/dev/null 
  rm /tmp/$$.FTPCON.tmp 2>/dev/null 
  rm /tmp/$$.sftp_batch.tmp 2>/dev/null 
  msg "done." 
} 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# 
# --> FUNCTION: inbound MVS   
 
inbound_vms () 
{ 
 
 
# @@@ add test to see if the /.netrc file is out there 
 
msg "--> Connecting to VMS Environment on ${MACHNAM} ... " 
 
# --> Error Check: Does Machine Name exist in .netrc file 
# 
#      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
if [ "${error_handle}" -eq 0 ] 
then  
  msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
  msg "\n for more information, use detail diagnostic mode" 
  msg "\n" 
  msg "\n.............Mask..........owner....grp..file." -d 
  msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
  msg "\nFormat:" -d 
  msg "machine <machnam> login <userid> password password" -d 
  error_exit 
else 
  msg "--> Checked .netrc, ok" -d 
fi 
 
# --> Start connection 
 
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
cd oracle       # take me out soon
cd ${HL_QUALIFIER}
cd outbound
ls
quit
EOF
 
# .............. 
# --> Error Check: Did we time out on attempt to connect? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection timed out"|wc -l`
if [ "${error_handle}" -gt 0 ]
then 
  msg "\n--> Logon, Failed!.. we timed out ${MACHNAM} seems to be down or sick." 
  error_exit 
else 
  : 
fi 
 
# .............. 
# --> Error Check: Did we get a control connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l`
if [ "${error_handle}" -gt 0 ]
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Were we refused connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l`
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Does Machine Name exist in hosts file? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
  error_exit 
else 
  msg "--> Finding Machine, ok" -d 
fi 
msg "\n--> Processing inbound" 
 
 
# .............. 
# --> Error Check: Did we get a logon 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l`
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!" 
  error_exit 
else 
  msg "--> Logon, successful" -d 
fi 
 
 
# .............. 
# --> Check to see if we have files 
msg "\n test "

cp /tmp/$$.FTPCON.tmp  /tmp/ppn
cat /tmp/$$.FTPCON.tmp|grep -v "You are already logged in." | \
    grep -v "Login failed." | grep -v "257 " > \
    /tmp/$$.FTPCON.target.tmp
 

msg "\n `cat /tmp/$$.FTPCON.target.tmp` "

if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ]
then 
  msg "\n--> Files found for processing, ok.\n" 
 
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep " test "|wc -l` 
 
  if [ "${error_handle}" -eq 1 ]   # this s forced to ok for now,  @@@ 
  then  
    HL_QUALIFIER_LC=`echo "${HL_QUALIFIER}"|tr "[:upper:]" "[:lower:]"` 
    msg "\n--> ERROR, Can not locate directory ${HL_QUALIFIER_LC} on ${MACHNAM}" 
    msg "\nStructure should be: " 
    msg "\noracle/${HL_QUALIFIER_LC}/outbound" 
    msg "oracle/${HL_QUALIFIER_LC}/inbound" 
    msg "oracle/${HL_QUALIFIER_LC}/archive" 
    msg "oracle/${HL_QUALIFIER_LC}/bad" 
    msg "oracle/${HL_QUALIFIER_LC}/inprocess" 
    error_exit 
  else 
    msg "\n--> Checked for directories, ok" -d  
    cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
  fi 
 
  cat /tmp/$$.FTPCON.target.tmp|sed -e "s/outbound.//g" >/tmp/$$.FTPCON.tmp.edit 
  mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
  msg "\nConnected to VMS environment on ${MACHNAM}" 
  msg "........................................................................"
  msg "Files to be Copied from VMS Environment to `uname -n`:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................"
  msg "Building datastream to move files from the VMS Environment and\n" 
  msg "archive them on success in the VMS Environment:\n" 
  echo "#!/bin/bash" > /tmp/$$.FTPCON.out.stream.tmp
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \
    >> /tmp/$$.FTPCON.out.stream.tmp

  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd oracle" >> /tmp/$$.FTPCON.out.stream.tmp  #take me out 
  echo "cd ${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
   
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
       file_2=`echo "${file}"` 
       file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
       echo "get [.outbound]${file_2} ${file_2}" >> /tmp/$$.FTPCON.out.stream.tmp
      echo "rename [.outbound]${file_2} [.archive]${file_2}" \
       >> /tmp/$$.FTPCON.out.stream.tmp
  done 

  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to VMS environment to Process moves and archives ...\n"
    `/tmp/$$.FTPCON.out.stream.tmp`
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................"
  msg "Files transposed on `uname -n`:\n" 
  msg "From\t\t\tTo" 
  msg "_____________________\t_______________________" 
  for file in `cat /tmp/$$.FTPCON.target.tmp"` 
  do 
    file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
    target_file=`echo ${file}|cut -d. -f1`  
    target_suffix=`echo ${file}|cut -d. -f2|tr "[:lower:]" "[:upper:]"` 
    echo "${file}\t\t${target_file}.${target_suffix}" 
    mv ${CINT_TOP}/inbound/${file} \
    `echo "${CINT_TOP}/inbound/${target_file}.${target_suffix}"`
  done 
 
  #  .............. 
  # --> Error Check: Can we move the source to the archive directory? 
  # 
 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Cannot rename"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, unable to move a file" 
    msg "............to the archive directory.  Could be a permissions"        
    msg "............problem or the file may already exist in the     "        
    msg "............archive directory on ${MACHNAM}                  "        
    error_exit 
  else 
   :  
  fi 
   
  else 
    msg "\n--> Exiting, no files found on ${MACHNAM} to transfer" 
    return 
fi 
 
} 
 
   
# ......................................................................... 
# 
# --> FUNCTION: outbound MVS   
# 
 
outbound_mvs () 
{ 
 
msg "\n--> Processing outbound" 
 
CINT_TOP=${SCINT_TOP} 
 
 
#ls -1c $CINT_TOP/outbound|grep -v inprocess > /tmp/$$.FTPCON.target.tmp  
ls -1c $CINT_TOP/outbound|grep -v inprocess |grep ${MACHNAM}> /tmp/$$.FTPCON.target.tmp 
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "........................................................................" 
  msg "Files to be Copied from `uname -n` to the MVS/TSO Environment :\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files to the MVS Environment and\n" 
  msg "archive them on success in the `uname -n` Environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd 'ORACLE.${HL_QUALIFIER}'" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       #file_2=`echo "V${file}"|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       file_strip=`echo ${file}|grep -v ${MACHNAM}.` 
       file_2=`echo "V${file_strip}"|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       echo "put ${file} 'ORACLE.${HL_QUALIFIER}.INBOUND.${file_2}' " \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to MVS to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to MVS/TSO" 
  return 
fi 
 
} 
 
 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
 
 
 
 
# --> FUNCTION: inbound NT (Version 4.x)   
# 
 
inbound_nt4 () 
{ 
msg "--> ERROR - NT Version 4.x not supported at this time" 
error_exit 
} 
 
# --> FUNCTION: outbound NT (Version 4.x)   
# 
 
outbound_nt4 () 
{ 
msg "--> ERROR - NT Version 4.x not supported at this time" 
error_exit 
} 
 
 
 
# --> FUNCTION: inbound NT (Version 3.x)   
 
 
inbound_nt3 () 
{ 
 
 
# @@@ add test to see if the /.netrc file is out there 
 
msg "--> Connecting to NT (Version 3.x) Environment on ${MACHNAM} ... " 
 
# --> Error Check: Does Machine Name exist in .netrc file 
# 
#      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
if [ "${error_handle}" -eq 0 ] 
then  
  msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
  msg "\n for more information, use detail diagnostic mode" 
  msg "\n" 
  msg "\n.............Mask..........owner....grp..file." -d 
  msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
  msg "\nFormat:" -d 
  msg "machine <machnam> login <userid> password password" -d 
  error_exit 
else 
  msg "--> Checked .netrc, ok" -d 
fi 


# --> Start connection 
 

ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd oracle       # take me out soon
cd ${HL_QUALIFIER}
cd outbound
ls
quit
EOF

 

# .............. 
# --> Error Check: Did we time out on attempt to connect? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection timed out"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!.. we timed out ${MACHNAM} seems to be down or sick."
  error_exit 
else 
  : 
fi 
 
# .............. 
# --> Error Check: Did we get a control connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Were we refused connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "connect: Connection refused"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Does Machine Name exist in hosts file? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
  error_exit 
else 
  msg "--> Finding Machine, ok" -d 
fi 
msg "\n--> Processing inbound" 
 
 
# .............. 
# --> Error Check: Did we get a logon 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!" 
  error_exit 
else 
  msg "--> Logon, successful" -d 
fi 
 
 
# .............. 
# --> Check to see if we have files 
 
cat /tmp/$$.FTPCON.tmp|grep -v "Current"|grep -v "Local"|grep -v "Interactive" \
    |grep -v "current"|grep -v "Requested database set in use" > \ 
    /tmp/$$.FTPCON.target.tmp  
 
if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ] 
then 
  msg "\n--> Files found for processing, ok.\n" 
 
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep " test "|wc -l` 
 
  if [ "${error_handle}" -eq 1 ]   # this s forced to ok for now,  @@@ 
  then  
    HL_QUALIFIER_LC=`echo "${HL_QUALIFIER}"|tr "[:upper:]" "[:lower:]"` 
    msg "\n--> ERROR, Can not locate directory ${HL_QUALIFIER_LC} on ${MACHNAM}" 
    msg "\nStructure should be: " 
    msg "\noracle/${HL_QUALIFIER_LC}/outbound" 
    msg "oracle/${HL_QUALIFIER_LC}/inbound" 
    msg "oracle/${HL_QUALIFIER_LC}/archive" 
    msg "oracle/${HL_QUALIFIER_LC}/bad" 
    msg "oracle/${HL_QUALIFIER_LC}/inprocess" 
    error_exit 
  else 
    msg "\n--> Checked for directories, ok" -d  
    cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
  fi 
 
  cat /tmp/$$.FTPCON.target.tmp|sed -e "s/outbound.//g" >/tmp/$$.FTPCON.tmp.edit 
  mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
  msg "\nConnected to NT (Version 3.x) environment on ${MACHNAM}" 
  msg "........................................................................" 
  msg "Files to be Copied from NT (Version 3.x) Environment to `uname -n`:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files from the NT (Version 3.x) Environment and\n" 
  msg "archive them on success in the NT (Version 3.x) Environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "rstatus" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd oracle" >> /tmp/$$.FTPCON.out.stream.tmp  #take me out 
  echo "cd ${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
   
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
       file_2=`echo "${file}"` 
       file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
       echo "get outbound/${file_2} ${file_2}" >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "rename outbound/${file_2} archive/${file_2}" \ 
       >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to NT (Version 3.x) environment to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
  msg "Files transposed on `uname -n`:\n" 
  msg "From\t\t\tTo" 
  msg "_____________________\t_______________________" 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
    file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
    target_file=`echo ${file}|cut -d. -f1`  
    target_suffix=`echo ${file}|cut -d. -f2|tr "[:lower:]" "[:upper:]"` 
    echo "${file}\t\t${target_file}.${target_suffix}" 
    mv ${CINT_TOP}/inbound/${file} \ 
    `echo "${CINT_TOP}/inbound/${target_file}.${target_suffix}"` 
  done 
 
  #  .............. 
  # --> Error Check: Can we move the source to the archive directory? 
  # 
 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Cannot rename"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, unable to move a file" 
    msg "............to the archive directory.  Could be a permissions"        
    msg "............problem or the file may already exist in the     "        
    msg "............archive directory on ${MACHNAM}                  "        
    error_exit 
  else 
   :  
  fi 
   
  else 
    msg "\n--> Exiting, no files found on ${MACHNAM} to transfer" 
    return 
fi 
 
} 
 
# ......................................................................... 
# 
# --> FUNCTION: outbound NT (Version 3.x)   
 
outbound_nt3 () 
{ 
 
# .............. 
# --> Check to see if we have files 
 
 
#ls -1c ${CINT_TOP}/outbound|grep -v inprocess > /tmp/$$.FTPCON.target.tmp  
ls -1c ${CINT_TOP}/outbound|grep -v inprocess|grep ${MACHNAM} > /tmp/$$.FTPCON.target.tmp  
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "--> Connecting to NT (Version 3.x) Environment on ${MACHNAM} ... " 
 
  # --> Error Check: Does Machine Name exist in .netrc file 
  # 
  #      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
  error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
  if [ "${error_handle}" -eq 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
    msg "\n for more information, use detail diagnostic mode" 
    msg "\n" 
    msg "\n.............Mask..........owner....grp..file." -d 
    msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
    msg "\nFormat:" -d 
    msg "machine <machnam> login <userid> password password" -d 
    error_exit 
  else 
    msg "--> Checked .netrc, ok" -d 
  fi 
 
  # --> Start connection, test to see if the box is out there and likes us 
  #     (note, this block below must be in col1 of the shell script)   
 

ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd oracle       # take me out soon
cd ${HL_QUALIFIER}
cd outbound
ls
quit
EOF
 
  # .............. 
  # --> Error Check: Did we get a control connection 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
 fi 
 
  # .............. 
  # --> Error Check: Were we refused connection 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
   msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
  fi 
 
  # .............. 
  # --> Error Check: Does Machine Name exist in hosts file? 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
   
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
 
 
#  .............. 
# --> Error Check: Did we get a logon 
# 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed!" 
    error_exit 
  else 
    msg "--> Logon, successful" -d 
  fi 
 
 
  msg "\n--> Processing outbound" 
 
 
 
  msg"........................................................................" 
  msg "Files to be Copied from `uname -n` to the NT (Version 3.x) environment on ${MACHNAM}:\n" 
 cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files to the NT (Version 3.x) environment and\n" 
  msg "archive them on success in the `uname -n` environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd oracle/${HL_QUALIFIER}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "pwd" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       file_strip=`echo "${file}"|grep -v ${MACHNAM}.` 
       file_2=`echo "${file_strip}"` #|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       echo "put ${file} ${file_2}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to NT (Version 3.x) on ${MACHNAM} to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
  #  .............. 
  # --> Error Check: Did we have permission problems 
  # 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Permission denied"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, permissions or file" 
    msg "\n............naming standard problem."                               
  
    error_exit 
  else 
   :  
  fi 
 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to NT (Version 3.x) " 
  msg "\n--> environment on ${MACHNAM} " 
  return 
fi 
 
} 
 
 
 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# 
# --> FUNCTION: inbound UNIX   
# 
 
inbound_unix () 
{ 
 
 
# @@@ add test to see if the /.netrc file is out there 
 
msg "--> Connecting to UNIX Environment on ${MACHNAM} ... " 
 
# --> Error Check: Does Machine Name exist in .netrc file 
# 
#      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
if [ "${error_handle}" -eq 0 ] 
then  
  msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
  msg "\n for more information, use detail diagnostic mode" 
  msg "\n" 
  msg "\n.............Mask..........owner....grp..file." -d 
  msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
  msg "\nFormat:" -d 
  msg "machine <machnam> login <userid> password password" -d 
  error_exit 
else 
  msg "--> Checked .netrc, ok" -d 
fi 
 
# --> Start connection
#     TJT Feb 5, 2002 - Conditionally change directories to
#                       oracle if NOT a PeopleSoft connection
#                       (gumley or bascaby)
#
#     (note, this block below must be in col1 of the shell script)

# Check for gumley - TJT Feb 5, 2002
if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
then
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# Check for bascaby - TJT Feb 5, 2002
else
if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
then
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# All others - TJT Feb 5, 2002
else
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd oracle
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

fi
fi

# .............. 
# --> Error Check: Did we time out on attempt to connect? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection timed out"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!.. we timed out ${MACHNAM} seems to be down or sick." 
  error_exit 
else 
  : 
fi 
 
# .............. 
# --> Error Check: Did we get a control connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Were we refused connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Does Machine Name exist in hosts file? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
  error_exit 
else 
  msg "--> Finding Machine, ok" -d 
fi 
msg "\n--> Processing inbound" 
 
 
# .............. 
# --> Error Check: Did we get a logon 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!" 
  error_exit 
else 
  msg "--> Logon, successful" -d 
fi 
 
 
# .............. 
# --> Check to see if we have files 
 
cat /tmp/$$.FTPCON.tmp|grep -v "Current"|grep -v "Local"|grep -v "Interactive" \
    |grep -v "current"|grep -v "Requested database set in use" > /tmp/$$.FTPCON.target.tmp 


 
if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ] 
then 

  msg "\n--> Files found for processing, ok.\n" 
 
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep " test "|wc -l` 
 
  if [ "${error_handle}" -eq 1 ]   # this s forced to ok for now,  @@@ 
  then  
    HL_QUALIFIER_LC=`echo "${HL_QUALIFIER}"|tr "[:upper:]" "[:lower:]"` 
    msg "\n--> ERROR, Can not locate directory ${HL_QUALIFIER_LC} on ${MACHNAM}" 
    msg "\nStructure should be: " 

    # Conditionally set message - TJT Feb 5, 2002

    # Check for gumley - TJT Feb 5, 2002
    if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
    then
      msg "\n${HL_QUALIFIER_LC}/outbound" 
      msg "${HL_QUALIFIER_LC}/inbound" 
      msg "${HL_QUALIFIER_LC}/archive" 
      msg "${HL_QUALIFIER_LC}/bad" 
      msg "${HL_QUALIFIER_LC}/inprocess"
      error_exit

    # Check for bascaby - TJT Feb 5, 2002
    else
      if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
      then
        msg "\n${HL_QUALIFIER_LC}/outbound" 
        msg "${HL_QUALIFIER_LC}/inbound" 
        msg "${HL_QUALIFIER_LC}/archive" 
        msg "${HL_QUALIFIER_LC}/bad" 
        msg "${HL_QUALIFIER_LC}/inprocess"
        error_exit

    # All others - TJT Feb 5, 2002
      else
        msg "\noracle/${HL_QUALIFIER_LC}/outbound" 
        msg "oracle/${HL_QUALIFIER_LC}/inbound" 
        msg "oracle/${HL_QUALIFIER_LC}/archive" 
        msg "oracle/${HL_QUALIFIER_LC}/bad" 
        msg "oracle/${HL_QUALIFIER_LC}/inprocess" 
        error_exit 

      fi
    fi
  else 
    msg "\n--> Checked for directories, ok" -d  
    cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
  fi 

  cat /tmp/$$.FTPCON.target.tmp|sed -e "s/outbound.//g" >/tmp/$$.FTPCON.tmp.edit 
  mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
  msg "\nConnected to UNIX environment on ${MACHNAM}" 
  msg "........................................................................" 
  msg "Files to be Copied from UNIX Environment to `uname -n`:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files from the UNIX Environment and\n" 
  msg "archive them on success in the UNIX Environment:\n" 
  echo "#!/bin/bash" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 

  # Check whether to change directories - TJT Feb 5, 2002
  if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
  then
    :
  else
    if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
    then
      :
    else
      echo "cd oracle" >> /tmp/$$.FTPCON.out.stream.tmp 
    fi
  fi

  echo "cd ${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
   
  for file in `awk '{print $(NF)}' /tmp/$$.FTPCON.target.tmp|cat` 
  do 
       file_2=`echo "${file}"` 
       file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
       echo "get outbound/${file_2} ${file_2}" >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "rename outbound/${file_2} archive/${file_2}" \
       >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to UNIX environment to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
  msg "Files transposed on `uname -n`:\n" 
  msg "From\t\t\tTo" 
  msg "_____________________\t_______________________" 
  for file in `awk '{print $(NF)}' /tmp/$$.FTPCON.target.tmp|cat`  
  do 
    file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
    target_file=`echo ${file}|cut -d. -f1`  
    target_suffix=`echo ${file}|cut -d. -f2` 
    echo -e "${file}\t\t${target_file}.${target_suffix}" 
    mv ${CINT_TOP}/inbound/${file} \
    `echo "${CINT_TOP}/inbound/${target_file}.${target_suffix}"` 
  done 
 
  #  .............. 
  # --> Error Check: Can we move the source to the archive directory? 
  # 
 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Cannot rename"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, unable to move a file" 
    msg "............to the archive directory.  Could be a permissions"        
    msg "............problem or the file may already exist in the     "        
    msg "............archive directory on ${MACHNAM}                  "        
    error_exit 
  else 
   :  
  fi 
   
  else 
    msg "\n--> Exiting, no files found on ${MACHNAM} to transfer" 
    return 
fi 
 
} 
 












 






























 
# ......................................................................... 
# 
# --> FUNCTION: outbound UNIX   
# 
outbound_unix () 
{ 
 
# .............. 
# --> Check to see if we have files 
 
 
#ls -1c ${CINT_TOP}/outbound/|grep -v inprocess  > /tmp/$$.FTPCON.target.tmp  
ls -1c ${CINT_TOP}/outbound/|grep -v inprocess |grep ${MACHNAM} > /tmp/$$.FTPCON.target.tmp 
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "--> Connecting to UNIX Environment on ${MACHNAM} ... " 
 
  # --> Error Check: Does Machine Name exist in .netrc file 
  # 
  #      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
  error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
  if [ "${error_handle}" -eq 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
    msg "\n for more information, use detail diagnostic mode" 
    msg "\n" 
    msg "\n.............Mask..........owner....grp..file." -d 
    msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
    msg "\nFormat:" -d 
    msg "machine <machnam> login <userid> password password" -d 
    error_exit 
  else 
    msg "--> Checked .netrc, ok" -d 
  fi 
 
  # --> Start connection, test to see if the box is out there and likes us
  #     TJT Feb 5, 2002 - Conditionally change directories to
  #                       oracle if NOT a PeopleSoft connection
  #                       (gumley or bascaby)
  #
  #     (note, this block below must be in col1 of the shell script)   

# Check for gumley - TJT Feb 5, 2002
if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
then
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# Check for bascaby - TJT Feb 5, 2002
else
if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
then
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# All others - TJT Feb 5, 2002
else
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd oracle
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

fi
fi
 
  # .............. 
  # --> Error Check: Did we get a control connection 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
 fi 
 
  # .............. 
  # --> Error Check: Were we refused connection 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
   msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
  fi 
 
  # .............. 
  # --> Error Check: Does Machine Name exist in hosts file? 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
   
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
 
 
#  .............. 
# --> Error Check: Did we get a logon 
# 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed!" 
    error_exit 
  else 
    msg "--> Logon, successful" -d 
  fi 
 
 
  msg "\n--> Processing outbound" 
 
 
 
  msg "........................................................................" 
  msg "Files to be Copied from `uname -n` to the UNIX environment on ${MACHNAM}:\n" 
 cat_msg /tmp/$$.FTPCON.target.tmp 
  msg"........................................................................" 
  msg "Building datastream to move files to the UNIX environment and\n" 
  msg "archive them on success in the `uname -n` environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp

# Check whether to change directories - TJT Feb 5, 2002

  if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
  then
    :
  else
    if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
    then
      :
    else
      echo "cd oracle" >> /tmp/$$.FTPCON.out.stream.tmp 
    fi
  fi

  echo "cd ${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "pwd" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       file_strip=`echo "${file}"|grep -v ${MACHNAM}.` 
       file_2=`echo "${file_strip}"` #|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       echo "put ${file} ${file_2} " >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
cp /tmp/$$.FTPCON.out.stream.tmp /tmp/ppn
  msg "Running stream to UNIX on ${MACHNAM} to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
  #  .............. 
  # --> Error Check: Did we have permission problems 
  # 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Permission denied"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, permissions or file" 
    msg "\n............naming standard problem."                               
  
    error_exit 
  else 
   :  
  fi 
 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to UNIX " 
  msg "\n--> environment on ${MACHNAM} " 
  return 
fi 
 
} 












 
# ......................................................................... 
# .........................................................................
outbound_sbx () 
{ 
# .............. 
# --> Check to see if we have files



SRC_OUT=$CINT_TOP/outbound



REQ_ID=$(sqlplus -s $FCP_LOGIN <<END
       set pagesize 0 feedback off verify off heading off echo off;
       SELECT max(a.request_id) 
  FROM FND_CONCURRENT_REQUESTS a,
  FND_CONCURRENT_PROGRAMS b
WHERE a.concurrent_program_id=b.concurrent_program_id
aND b.Concurrent_program_name='OSIRCNEXT' order by a.last_update_date desc;
       exit;
END
)
echo "Request ID:" $REQ_ID

SRC_DIR=$(sqlplus -s $FCP_LOGIN <<END
set pagesize 0 feedback off verify off heading off echo off;
SELECT OUTFILE_NAME
  FROM fnd_concurrent_requests a
WHERE request_id =$REQ_ID;
exit;
END
)
echo "Source File:" $SRC_DIR
TRG_DIR=$(sqlplus -s $FCP_LOGIN <<END
       set pagesize 0 feedback off verify off heading off echo off;
       select directory_path from dba_directories where directory_name = 'XXSBX_AP_SABRIX_RECONCILIATION';
       exit;
END
)
echo "TRG_DIR is:" $TRG_DIR
##SRC_FILE=SABRIX_ORACLETAX_REPORT_`date +"%Y%m%d%H%M%S"`.out
SRC_FILE=ReconInputFile.out 


cp $SRC_DIR $SRC_OUT/$SRC_FILE

echo "SRC_OUT is:" $SRC_OUT/$SRC_FILE

echo "copied successfully to outbound folder "
cd ${CINT_TOP}/outbound
# --> Check to see if we have files
#ls -1c ${CINT_TOP}/outbound/|grep .out > /tmp/$$.FTPCON.target.tmp 
#.........................................................................
#...................................................................................
echo "===================================================="
#echo "Verifying that ${MACHNAM} is reachable...pinging ${MACHNAM}"
#ping ${MACHNAM}

#RETCODE="$?"
#if [ $RETCODE -eq 0 ]
#then
#  echo "Host ${MACHNAM} is responding"
#else
#  echo "     ERROR: ${MACHNAM} is not responding"  
#exit
#fi
error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l`  


user_name=`uname -a`

echo "user_name is :$user_name"


 
  if [ "${error_handle}" -eq 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
    msg "\n for more information, use detail diagnostic mode" 
    msg "\n" 
    msg "\n.............Mask..........owner....grp..file." -d 
    msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
    msg "\nFormat:" -d 
    msg "machine <machnam> login <userid> password password" -d 
    error_exit 
  else 
    msg "--> Checked .netrc, ok" -d 
  fi

#===============================================================================
# Create dynamic input file for FTP commands.
#===============================================================================
echo  "Create dynamic input file for FTP commands."
Tempfile=${CINT_TOP}/outbound/FTPCON_GET_FILE.temp
FtpLog=${CINT_TOP}/outbound/FTPCON_GET_FILE.log
echo "pwd"                                > $Tempfile
echo "cd $TRG_DIR"                        >> $Tempfile
echo "lcd $SRC_OUT"                    >> $Tempfile
echo "ascii"                              >> $Tempfile
echo "put $SRC_FILE" >> $Tempfile
echo "quit"                               >> $Tempfile

echo  "End dynamic input file for FTP commands."

#===============================================================================
# Pull file from the EFS Unix Server to SABRIX  Server
#===============================================================================
echo "===================================================="
echo "FTPing files from $FTP_HOST"
/usr/bin/ftp -idv ${MACHNAM} < $Tempfile | tee -a $FtpLog
echo "Please Cehck the Above file is Executing or not"
RETCODE="$?"

CONNECTED=`grep -ic '230 User EGD/efsftp logged in' $FtpLog`
echo " Connect Status$CONNECTED"
TRANSFERS=`grep -ic '226 Transfer complete' $FtpLog`
echo "Transfer status $TRANSFERS"

if [ $CONNECTED -ne 0 -a $TRANSFERS -ne 0 ]
then
  RETCODE=0
  echo "===================================================="
  echo "FTP Completed Successfully"
  echo "===================================================="
else
  RETCODE=1
  echo "===================================================="
  echo "Connect status (expect 1)   = $CONNECTED"
  echo "Transfer status(expect 1)   = $TRANSFERS"
  echo "FTP Failed with Return code = $RETCODE"
  echo "===================================================="
fi


#.........................................................................................................................................
#..........................................................................................
 # --> Error Check: Did we get a control connection 



echo 'end outbound_sbx'  
} 


 
# ......................................................................... 
# ......................................................................... 
# 
# --> FUNCTION: inbound SFTP
# 
 
inbound_sftp () 
{ 
 
# --> Start connection
#     TJT Feb 5, 2002 - Conditionally change directories to
#                       oracle if NOT a PeopleSoft connection
#                       (gumley or bascaby)
#
#     (note, this block below must be in col1 of the shell script)

# Check for gumley - TJT Feb 5, 2002
if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
then
/usr/bin/sftp ${MACHNAM} > /tmp/$$.FTPCON.tmp <<-EOF
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# Check for bascaby - TJT Feb 5, 2002
else
if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
then
/usr/bin/sftp -b ${MACHNAM} > /tmp/$$.FTPCON.tmp <<-EOF
pwd
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

# All others - TJT Feb 5, 2002
else
/usr/bin/sftp ${MACHNAM} > /tmp/$$.FTPCON.tmp <<-EOF
pwd
cd oracle
cd ${HL_QUALIFIER}
cd outbound
ls *.${FEED_SUFFIX}
quit
EOF

fi
fi

# .............. 
# --> Error Check: Did we time out on attempt to connect? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection timed out"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!.. we timed out ${MACHNAM} seems to be down or sick." 
  error_exit 
else 
  : 
fi 
 
# .............. 
# --> Error Check: Did we get a control connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Were we refused connection 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l` 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
  error_exit 
else 
  msg "--> Control Connection appears ok" -d 
fi 
 
# .............. 
# --> Error Check: Does Machine Name exist in hosts file? 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
  error_exit 
else 
  msg "--> Finding Machine, ok" -d 
fi 
msg "\n--> Processing inbound" 
 
 
# .............. 
# --> Error Check: Did we get a logon 
 
error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
if [ "${error_handle}" -gt 0 ] 
then  
  msg "\n--> Logon, Failed!" 
  error_exit 
else 
  msg "--> Logon, successful" -d 
fi 
 
 
# .............. 
# --> Check to see if we have files 
 
cat /tmp/$$.FTPCON.tmp|grep -v "Current"|grep -v "Local"|grep -v "Interactive" \
    |grep -v "current"|grep -v "Requested database set in use" \
    |grep -v "Remote working"  > /tmp/$$.FTPCON.target.tmp 

 
if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ] 
then 

  msg "\n--> Files found for processing, ok.\n" 
 
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep " test "|wc -l` 
 
  if [ "${error_handle}" -eq 1 ]   # this s forced to ok for now,  @@@ 
  then  
    HL_QUALIFIER_LC=`echo "${HL_QUALIFIER}"|tr "[:upper:]" "[:lower:]"` 
    msg "\n--> ERROR, Can not locate directory ${HL_QUALIFIER_LC} on ${MACHNAM}" 
    msg "\nStructure should be: " 

    # Conditionally set message - TJT Feb 5, 2002

    # Check for gumley - TJT Feb 5, 2002
    if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
    then
      msg "\n${HL_QUALIFIER_LC}/outbound" 
      msg "${HL_QUALIFIER_LC}/inbound" 
      msg "${HL_QUALIFIER_LC}/archive" 
      msg "${HL_QUALIFIER_LC}/bad" 
      msg "${HL_QUALIFIER_LC}/inprocess"
      error_exit

    # Check for bascaby - TJT Feb 5, 2002
    else
      if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
      then
        msg "\n${HL_QUALIFIER_LC}/outbound" 
        msg "${HL_QUALIFIER_LC}/inbound" 
        msg "${HL_QUALIFIER_LC}/archive" 
        msg "${HL_QUALIFIER_LC}/bad" 
        msg "${HL_QUALIFIER_LC}/inprocess"
        error_exit

    # All others - TJT Feb 5, 2002
      else
        msg "\noracle/${HL_QUALIFIER_LC}/outbound" 
        msg "oracle/${HL_QUALIFIER_LC}/inbound" 
        msg "oracle/${HL_QUALIFIER_LC}/archive" 
        msg "oracle/${HL_QUALIFIER_LC}/bad" 
        msg "oracle/${HL_QUALIFIER_LC}/inprocess" 
        error_exit 

      fi
    fi
  else 
    msg "\n--> Checked for directories, ok" -d  
    cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
  fi 

  cat /tmp/$$.FTPCON.target.tmp|sed -e "s/outbound.//g" >/tmp/$$.FTPCON.tmp.edit 
  mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
  msg "\nConnected to UNIX environment on ${MACHNAM}" 
  msg "........................................................................" 
  msg "Files to be Copied from UNIX Environment to `uname -n`:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files from the UNIX Environment and\n" 
  msg "archive them on success in the UNIX Environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "/usr/bin/sftp ${MACHNAM} > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \
    >> /tmp/$$.FTPCON.out.stream.tmp 
 
  # Check whether to change directories - TJT Feb 5, 2002
  if [ "`echo ${MACHNAM}|grep 'gumley'|wc -l`" -eq 1 ]
  then
    :
  else
    if [ "`echo ${MACHNAM}|grep 'bascaby'|wc -l`" -eq 1 ]
    then
      :
    else
      echo "cd oracle" >> /tmp/$$.FTPCON.out.stream.tmp 
    fi
  fi

  echo "cd ${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
   
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
       file_2=`echo "${file}"` 
       file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
       echo "get outbound/${file_2} ${file_2}" >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "rename outbound/${file_2} archive/${file_2}" \
       >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to UNIX environment to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
  msg "Files transposed on `uname -n`:\n" 
  msg "From\t\t\tTo" 
  msg "_____________________\t_______________________" 
  for file in `cat /tmp/$$.FTPCON.target.tmp"` 
  do 
    file_uc=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
    target_file=`echo ${file}|cut -d. -f1`  
    target_suffix=`echo ${file}|cut -d. -f2` 
    echo "${file}\t\t${target_file}.${target_suffix}" 
    mv ${CINT_TOP}/inbound/${file} \
    `echo "${CINT_TOP}/inbound/${target_file}.${target_suffix}"` 
  done 
 
  #  .............. 
  # --> Error Check: Can we move the source to the archive directory? 
  # 
 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Cannot rename"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, unable to move a file" 
    msg "............to the archive directory.  Could be a permissions"        
    msg "............problem or the file may already exist in the     "        
    msg "............archive directory on ${MACHNAM}                  "        
    error_exit 
  else 
   :  
  fi 
   
  else 
    msg "\n--> Exiting, no files found on ${MACHNAM} to transfer" 
    return 
fi 
 
} 
 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# 
# --> FUNCTION: outbound VMS   
# 
outbound_vms () 
{ 
 
# .............. 
# --> Check to see if we have files 
 
 
#ls -1c ${CINT_TOP}/outbound/|grep -v inprocess  > /tmp/$$.FTPCON.target.tmp  
ls -1c ${CINT_TOP}/outbound/|grep -v inprocess |grep ${MACHNAM} > /tmp/$$.FTPCON.target.tmp 
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "--> Connecting to VMS Environment on ${MACHNAM} ... " 
 
  # --> Error Check: Does Machine Name exist in .netrc file 
  # 
  #      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
  error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
  if [ "${error_handle}" -eq 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
    msg "\n for more information, use detail diagnostic mode" 
    msg "\n" 
    msg "\n.............Mask..........owner....grp..file." -d 
    msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
    msg "\nFormat:" -d 
    msg "machine <machnam> login <userid> password password" -d 
    error_exit 
  else 
    msg "--> Checked .netrc, ok" -d 
  fi 
 
  # --> Start connection, test to see if the box is out there and likes us 
  #     (note, this block below must be in col1 of the shell script)   
 
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd oracle       # take me out soon
cd ${HL_QUALIFIER}
cd outbound
ls
quit
EOF
 
  # .............. 
  # --> Error Check: Did we get a control connection 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No Control Connection for command"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed! ${MACHNAM} seems to be down." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
 fi 
 
  # .............. 
  # --> Error Check: Were we refused connection 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection refused"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
   msg "\n--> Logon, Failed! ${MACHNAM} seems we were refused connection." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
  fi 
 
  # .............. 
  # --> Error Check: Does Machine Name exist in hosts file? 
   
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Host name lookup failure"|wc -l` 
   
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, could not locate ${MACHNAM}, check host file" 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
 
 
#  .............. 
# --> Error Check: Did we get a logon 
# 
 
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "530 Please login with"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> Logon, Failed!" 
    error_exit 
  else 
    msg "--> Logon, successful" -d 
  fi 
 
 
  msg "\n--> Processing outbound" 
 
 
 
  msg "........................................................................" 
  msg "Files to be Copied from `uname -n` to the VMS environment on ${MACHNAM}:\n" 
 cat_msg /tmp/$$.FTPCON.target.tmp 
  msg"........................................................................" 
  msg "Building datastream to move files to the VMS environment and\n" 
  msg "archive them on success in the `uname -n` environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd oracle/${HL_QUALIFIER}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "pwd" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       file_strip=`echo "${file}"|grep -v ${MACHNAM}.` 
       file_2=`echo "${file_strip}"` #|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       echo "put ${file} ${file_2} " \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to VMS on ${MACHNAM} to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
  #  .............. 
  # --> Error Check: Did we have permission problems 
  # 
 
  error_handle=`cat /tmp/$$.FTPCON.out.stream.tmp.log|grep "Permission denied"|wc -l` 
 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR - Occured on ${MACHNAM} side, permissions or file" 
    msg "\n............naming standard problem."                           
    error_exit 
  else 
   :  
  fi 
 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to VMS" 
  msg "\n--> environment on ${MACHNAM} " 
  return 
fi 
 
} 

# 
# ......................................................................... 
# ......................................................................... 
# ......................................................................... 
# 
# --> FUNCTION: inbound as400   
# 
 
inbound_as400 () 
{ 
 
msg "--> Connecting to AS400 Environment on ${MACHNAM} ... " 
 
msg "\n--> Processing inbound" 
 
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
pwd
cd FIN${HL_QUALIFIER}
ls
quit
EOF
 
cat /tmp/$$.FTPCON.tmp|grep -iv "Current"|grep -iv "Local" \
    |grep -iv "Interactive"|grep -iv "Requested database set in use" \
    |grep "OUTBOUND." > /tmp/$$.FTPCON.target.tmp 
 
if [ "`grep "OUTBOUND." /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ] 
then 
  msg "\nFiles found for processing.\n" 
 
  cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
 
#  cat /tmp/$$.FTPCON.target.tmp|sed -e "s/OUTBOUND.//g">/tmp/$$.FTPCON.tmp.edit 
#  mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
  msg "\nConnected to AS400 environment on ${MACHNAM}" 
  msg "........................................................................" 
  msg "Files to be Copied from AS400 Environment to `uname -n`:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files from the AS400 Environment and\n" 
  msg "archive them on success in the AS400 Environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd FIN${HL_QUALIFIER}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
     file_2=`echo "${file}" | sed -e "s/OUTBOUND.\.//"` 
     echo "get FIN${HL_QUALIFIER}/${file} ${file_2}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
 
     file_2='echo "${file}" | sed -e "s/OUTBOUND/ARCHIVE/"' 
     echo "rename FIN${HL_QUALIFIER}/${file} FIN${HL_QUALIFIER}/${file_2}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to AS400 environment to Process moves and archives ...\n" 
  `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
  msg "Files transposed on `uname -n`:\n" 
  msg "From\t\t\tTo" 
  msg "_____________________\t_______________________" 
  for file in `cat /tmp/$$.FTPCON.target.tmp | sed -e "s/OUTBOUND.\.//"` 
  do 
    target_file=`echo ${file} | tr "[:upper:]" "[:lower:]"` 
    echo "${file}\t\t\t${target_file}" 
    mv ${CINT_TOP}/inbound/${file} ${CINT_TOP}/inbound/${target_file} 
  done 
 
else 
  msg "\n--> Exiting, no files found on ${MACHNAM} to transfer" 
  return 
fi 
 
} 
 
# ......................................................................... 
# 
# --> FUNCTION: outbound as400   
# 
 
outbound_as400 () 
{ 
 
msg "--> Connecting to AS400 Environment on ${MACHNAM} ... " 
msg "\n--> Processing outbound" 
 
ls -1c ${CINT_TOP}/outbound|grep -v inprocess > /tmp/$$.FTPCON.target.tmp  
# ls -1c ${CINT_TOP}/outbound|grep -v inprocess|grep ${MACHNAM} > /tmp/$$.FTPCON.target.tmp 
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "........................................................................" 
  msg "Files to be Copied from `uname -n` to the AS400 environment on ${MACHNAM}:\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files to the AS400 environment and\n" 
  msg "archive them on success in the `uname -n` environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "cd './${HL_QUALIFIER}'" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       file_2=`echo "V${file}"`  #|tr "[:lower:]" "[:upper:]"|sed -e s/VV/V/g` 
       echo "put ${file} './${HL_QUALIFIER}/inbound/${file_2}' " \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to AS400 on ${MACHNAM} to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to AS400 " 
  msg "\n--> environment on ${MACHNAM} " 
  return 
fi 
 
} 
# ......................................................................... 
 
# <<<<<<<<<<<<<<<<<<<<<<<<<< M A I N  * * * L I N E >>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
# 
# <---------------------------- Validate and Process Passed Arguments ----------> 
#  
 
case "${num_args}" in  
0) echo "ERROR-Wrong number of arguments">>/tmp/$$.run.log 
   echo "\n      I'm going to exit." \ 
    >>/tmp/$$.run.log 
    echo "\n\nDone `date`.\n">>/tmp/$$.run.log 
    error_exit;; 
1) # assume SRS or only one parm i.e. Suffix 
    if [ `echo ${in_args}|awk '{ print $1 }'` = "FTPCON" ] 
    then  
      RUN_MODE="SRS" 
      srs=${in_args} 
    else 
      RUN_MODE="OS" 
      INT_SUFFIX=`echo ${in_args}|awk '{ print $1 }'` 
    fi;; 
2) if [ ${1} = "-dd" ] 
     then 
       diagnostic="detail" 
       INT_SUFFIX=${2} 
       RUN_MODE="OS" 
     else 
    if [ "${1}" = "-d" ] 
    then 
      diagnostic="standard" 
      INT_SUFFIX=${2} 
      RUN_MODE="OS" 
    else 
      INT_SUFFIX=${2} 
      RUN_MODE="OS" 
    fi 
    fi;; 
esac  
# ......................................................................... 
# 
 
 
# --> FUNCTION: inbound Tandem 
# 
 
inbound_tandem () 
{ 
 
# @@@ add test to see if the /.netrc file is out there 
 
msg "--> Connecting to UNIX Environment on ${MACHNAM} ... " 
 
# --> Error Check: Does Machine Name exist in .netrc file 
# 
#      -rwx------   1 applmgr  dba   41 Jul 13 17:03 .netrc 
 
error_handle=`cat ${HOME}/.netrc|grep ${MACHNAM}|wc -l` 
 
if [ "${error_handle}" -eq 0 ] 
then  
  msg "\n--> ERROR, ${MACHNAM} is not in the .netrc file" 
  msg "\n for more information, use detail diagnostic mode" 
  msg "\n" 
  msg "\n.............Mask..........owner....grp..file." -d 
  msg "Permissions: rwx------   1 applmgr  dba .netrc" -d 
  msg "\nFormat:" -d 
  msg "machine <machnam> login <userid> password password" -d 
  error_exit 
else 
  msg "--> Checked .netrc, ok" -d 
fi 
 
msg "--> Connecting to Tandem ... " 
 
msg "\n--> Processing inbound" 
 
ftp > /tmp/$$.FTPCON.tmp <<-EOF
open ${MACHNAM}
cd \$d3.outbound
ls *
quit
EOF
 
cat /tmp/$$.FTPCON.tmp|grep -v "Current"|grep -v "Local"|grep -v "Interactive" \
    |grep -v "current"|grep -v "Requested database set in use" \
    |grep -v "outbound." |grep -v "Subvolume" |grep -v "File" \
     > /tmp/$$.FTPCON.target.tmp  
 
if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -gt 0 ] 
then 
 msg "\nFiles found for processing.\n" 
 
 cat_msg /tmp/$$.FTPCON.target.tmp -d    # for detailed diag mode 
 
# cat /tmp/$$.FTPCON.target.tmp|sed -e "s/outbound.//g" > /tmp/$$.FTPCON.tmp.edit 
# mv /tmp/$$.FTPCON.tmp.edit /tmp/$$.FTPCON.target.tmp  
 
 
 msg "\nConnected to Tandem Environment on ${MACHNAM}" 
 msg "........................................................................" 
 msg "Files to be Copied from Tandem Environment to `uname -n`:\n" 
 cat_msg /tmp/$$.FTPCON.target.tmp 
 msg "........................................................................" 
 msg "Building datastream to move files from the Tandem Environment and\n" 
 msg "archive them on success in the Tandem Environment:\n" 
 echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
 echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  
 echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
# echo "cd \$d3.outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
 echo "lcd ${CINT_TOP}/inbound" >> /tmp/$$.FTPCON.out.stream.tmp 
 echo "binary" >> /tmp/$$.FTPCON.out.stream.tmp 
 echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
 
 for file in `cat /tmp/$$.FTPCON.target.tmp` 
  do 
#   file_2=`echo "${file}"|tr "[:lower:]" "[:upper:]"` 
    file_2=`echo "$file"`  
   echo "get \\\$d3.OUTBOUND.${file_2} ${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   echo "rename \\\$d3.OUTBOUND.${file_2} \\\$d3.ARCHIVE.${file_2}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
 echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
 echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
 msg "........................................................................" 
 msg "Below is the datastream to be executed :\n" 
 cat_msg /tmp/$$.FTPCON.out.stream.tmp 
 chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
 msg "........................................................................" 
 
 msg "Running stream to Tandem to Process moves and archives ...\n" 
 `/tmp/$$.FTPCON.out.stream.tmp` 
 cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
 msg "........................................................................" 
 msg "Files transposed on `uname -n`:\n" 
 msg "From\t\t\tTo" 
 msg "_____________________\t_______________________" 
 for file in `cat /tmp/$$.FTPCON.target.tmp"` 
  do 
 
  extension=`echo ${file}|cut -c6-8`  
  target_file=`echo ${file}| sed -e "s/${extension}/.${extension}/g"`  
 
  echo "${file}\t\t${target_file}" 
   
   mv ${CINT_TOP}/inbound/${file} \ 
    `echo "${CINT_TOP}/inbound/${target_file}"` 
  done 
else 
 msg "\n--> Exiting, no files found on Tandem to transfer" 
 return 
fi 
 
} 
 
# ......................................................................... 
# 
# --> FUNCTION: outbound Tandem   
# 
 
outbound_tandem () 
{ 
 
msg "\n--> Processing outbound" 
 
ls -1c $CINT_TOP/outbound|grep -v inprocess > /tmp/$$.FTPCON.target.tmp  
 
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
 
  msg "........................................................................" 
  msg "Files to be Copied from `uname -n` to the Tandem Environment :\n" 
  cat_msg /tmp/$$.FTPCON.target.tmp 
  msg "........................................................................" 
  msg "Building datastream to move files to the Tandem Environment and\n" 
  msg "archive them on success in the `uname -n` Environment:\n" 
  echo "#!/bin/sh" > /tmp/$$.FTPCON.out.stream.tmp 
  echo "ftp > /tmp/$$.FTPCON.out.stream.tmp.log <<-EOF" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
   
  echo "open ${MACHNAM}" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "rstatus" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "lcd ${CINT_TOP}/outbound" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "binary" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "prompt" >> /tmp/$$.FTPCON.out.stream.tmp 
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
       file_2=`echo "${file}" | sed -e "s/\.//g"` 
       echo "put ${file} \\\$d3.INBOUND.${file_2}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
       echo "!mv ${CINT_TOP}/outbound/${file} ${CINT_TOP}/archive/${file}" \ 
    >> /tmp/$$.FTPCON.out.stream.tmp 
  done 
  echo "quit" >> /tmp/$$.FTPCON.out.stream.tmp 
  echo "EOF" >> /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  msg "Running stream to Tandem to Process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp.log 
  msg "........................................................................" 
 
else  
  msg "\n--> Exiting, no files found on `uname -n` to transfer to Tandem" 
  return 
fi 
 
} 
 






 
 
 
 
# Code added by Rehan Qamar Global Scape (Inbound)
# ......................................................................... 
# 
# --> FUNCTION: inbound_globalscape
# 
inbound_globalscape () 
{ 

# .............. 
# --> Check if files exists on the globalscape server, create a list of files in /tmp/$$.FTPCON.target.tmp
# --> Creating batch for sftp and pass it on sftp process to execute it

Batchfile=/tmp/$$.sftp_batch.tmp

#
# Create Tempfile to list the Transfered Files
#
Tempfile=/tmp/temp.tmp

echo /tmp/$$.sftp_batch.tmp
echo $Batchfile

echo "cd ${REMOTE_FOLDER}" > $Batchfile
echo "ls *.${FEED_SUFFIX}*"  >> $Batchfile 	
echo "bye"                  >> $Batchfile 

/usr/bin/sftp -b $Batchfile -oPort=22  -oUser=${HL_QUALIFIER} ${MACHNAM} > /tmp/$$.FTPCON.tmp


#
# Removing Line 2 (sftp> ls *.<folder>*)
#
SED2=`sed -n '2p' < /tmp/$$.FTPCON.tmp ` 

if [ "${SED2}" = "sftp> ls *.${FEED_SUFFIX}*" ]
then
	sed -i.bak '2d' /tmp/$$.FTPCON.tmp
fi


cat /tmp/$$.FTPCON.tmp| grep "${FEED_SUFFIX}" > /tmp/$$.FTPCON.target.tmp 

#
# Copy to Tempfile  
#
cp /tmp/$$.FTPCON.target.tmp $Tempfile



msg "\nFTPCON.target.tmp \n" 
cat_msg /tmp/$$.FTPCON.target.tmp 

if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -eq 0 ]
then
   msg "\n  #####     No Files found for processing     #####\n" 
   #error_exit  
   exit 0 
fi 

  
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
  msg "--> Connecting to UNIX Environment on ${MACHNAM} ... " 
# --> Creating batch for sftp and pass it on sftp process to execute it
  Batchfile=/tmp/$$.sftp_batch.tmp  
echo "lcd ${CINT_TOP}/inbound"  > $Batchfile
echo "cd ${REMOTE_FOLDER}"  >> $Batchfile
  for file in `cat /tmp/$$.FTPCON.target.tmp` 
    do 
	   echo "get ${file}"             >> $Batchfile
       echo "rm ${file}" 			  >> $Batchfile
  done 
  echo "bye"                                     >> $Batchfile 


  
/usr/bin/sftp -b $Batchfile -oPort=22  -oUser=${HL_QUALIFIER} ${MACHNAM} > /tmp/$$.FTPCON.target.tmp
  # --> Starting connection ERROR checking 

 
  
  # --> Error Check: The connection to the server was lost.
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep "Connection lost"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, The connection to the server was lost." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
 fi 
 
  # --> Error Check: There is no connection to the server.
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep "No connection"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
   msg "\n--> ERROR, ${MACHNAM}, There is no connection to the server." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
  fi 
 
  # --> Error Check: A badly formatted packet or other SFTP protocol incompatibility was detected.
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep "Bad message"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, A badly formatted packet or other SFTP protocol incompatibility was detected." 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
  
  # --> Error Check: An error occurred, but no specific error code exists to describe the failure.
  error_handle=`cat /tmp/$$.FTPCON.target.tmp|grep "Failure"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, An error occurred, but no specific error code exists to describe the failure." 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
  
  chmod u+x $Batchfile
  cp $Batchfile /tmp/ppn


echo "---------------------------------------------------------------------------------"
echo "| Files moved to $CINT_TOP/inbound ....                                         |"
echo "---------------------------------------------------------------------------------"
echo ''
#
for file in $(cat $Tempfile)
do
	if [ -s "${CINT_TOP}/inbound/${file}" ]
	then
		echo "Successfully Moved: " ${file}
	else
		echo "**Failed** on Move: " ${file}
	fi		
done
#
echo "---------------------------------------------------------------------------------"

if [ ${ENCRYPTED} = "Y" ]; 
then

	echo ''
	echo ''
	echo ''
	echo ''
	echo ''
	echo "---------------------------------------------------------------------------------"
	echo "| Decrypting File(s)                                                            |"
	echo "---------------------------------------------------------------------------------"
	echo ''
	echo ''
	echo '' 
	#
	#
	#
	for file in  $CINT_TOP/inbound/*${FEED_SUFFIX}*
	do
		fayl="${file##*/}"
		filename=${fayl%.*}
		csvfile=$filename

		echo '--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'	
		echo 'De-crypting :' $file ' -- To -- ' $csvfile
			  
		gpg --batch --passphrase "enbridge1" --output $CINT_TOP/inbound/$csvfile --decrypt $file

		#
		# Check - De-crypted file exists in $CINT_TOP/inbound
		#
		if [ -f "$CINT_TOP/inbound/$csvfile" ];
		then
			echo 'De-crypted Successfully .......: ' $csvfile 
			echo 'Changing Permission ...........: ' $csvfile 
			chmod 777 $CINT_TOP/inbound/$csvfile
					   
			echo 'Removing Encrypted file .......: ' $file
			rm $file
		else
			echo 'De-crypting **FAILED** ........: ' $file
		fi  
		echo '--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'	
		echo ' '
		echo ' '

	done

	echo " *************** Decrypting Files Ends *************** "

else

	echo ""
	echo " **** Decryption NOT Requested ****"
	echo ""
fi
echo '--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'	

 msg "........................................................................" 

 
fi 
echo 'end inbound_globalscape'   
} 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

# Code added by R. Qammar for Outbound to Global Scape 
# ......................................................................... 
# 
# --> FUNCTION: outbound_globalscape   
# 
outbound_globalscape () 
{ 
DATE=`date +%Y%m%d` 
TSTAMP=`date '+%Y%m%d%H%M%S'`
counter=0

# .............. 
# --> Check to see if we have files 
#ls ${CINT_TOP}/outbound/|grep "BEELN_ENBRIDGE" |grep $DATE |grep .${FEED_SUFFIX}  > /tmp/$$.FTPCON.target.tmp 
ls ${CINT_TOP}/${REMOTE_FOLDER}/  > /tmp/$$.FTPCON.target.tmp 

if [ "`cat /tmp/$$.FTPCON.target.tmp|wc -l`" -eq 0 ]
then
   msg "\n No Files found for processing.\n" 
   error_exit  
fi 

# --> If the total number of files are less than or greater than 5 then return error
msg "\n Checking total number of files.\n" 
counter=`cat /tmp/$$.FTPCON.target.tmp|wc -l` 
#    do 
#		counter=`expr $counter + 1`
#  done 
  
#  if [ "${counter}" -lt 5 ] 
#   then 
#      msg "\nFiles count is less than 5, exiting.\n" 
#	     error_exit  
#  elif [ "${counter}" -gt 5 ]
#    then 
#      msg "\nFiles count is greater than 5, exiting.\n" 
#	     error_exit  
#  fi		 
 
 
# --> If files are found then we are ready to process
if [ -s /tmp/$$.FTPCON.target.tmp ] 
then 
  msg "\nFiles found for processing.\n" 
  msg "--> Connecting to UNIX Environment on ${MACHNAM} ... " 
 
# --> Creating batch for sftp and pass it on sftp process to execute it
 Batchfile=/tmp/$$.sftp_batch.tmp
  echo "lcd ${CINT_TOP}/${REMOTE_FOLDER}"  > $Batchfile
  echo "cd ${REMOTE_FOLDER}"  >> $Batchfile
  if [ ${ENCRYPTED} = "Y" ]; 
  then  
	  echo '================================================================================================================================================================================================='	
	  echo ' Encrypting File(s)'	
	  echo '================================================================================================================================================================================================='	
	  for file in `cat /tmp/$$.FTPCON.target.tmp` 
		do 
			 echo 'Enrypting :' ${CINT_TOP}/${REMOTE_FOLDER}/${file} ' -- To -- ' ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp		
			 #	

                      if [[ ! -z "${RECIPIENT// }" ]]; then
			   gpg --batch --output ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp --encrypt --recipient ${RECIPIENT} ${CINT_TOP}/${REMOTE_FOLDER}/${file}
			 else
			   gpg --batch --output ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp --encrypt ${CINT_TOP}/${REMOTE_FOLDER}/${file}
			 fi
			 #
			 # Send the Encrypted File ONLY when it got successfully Encrypted .......
			 #
			 if [ -s "${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp" ]
			 then
				echo 'Encrypted File: ' ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp
				# changing permission 
				chmod 777 ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp
				
				echo "put ${file}.pgp"             >> $Batchfile
				#echo "rm ${file}.pgp" >> $Batchfile
				echo "mv ${CINT_TOP}/${REMOTE_FOLDER}/${file} ${CINT_TOP}/archive/${file}-${TSTAMP}-arc" >> /tmp/$$.FTPCON.out.stream.tmp 
				echo "mv ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp ${CINT_TOP}/archive/${file}.pgp-${TSTAMP}-arc" >> /tmp/$$.FTPCON.out.stream.tmp 
				#rm ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp
			 else	
				echo 'Encryption **FAILED**: ' ${CINT_TOP}/${REMOTE_FOLDER}/${file} 
				error_exit
			 fi		 
		done 
	  echo "bye"                                     >> $Batchfile 

	else
	  echo '================================================================================================================================================================================================='	
	  echo ' **** Encryption Not Requested **** '	
	  echo '================================================================================================================================================================================================='	
	  echo ''	
	  echo ''	
	  echo ''	
	  echo ''	
	  echo ''	
      echo '================================================================================================================================================================================================='	
	  echo ' File(s) to be Moved'	
	  echo '================================================================================================================================================================================================='	
	  for file in `cat /tmp/$$.FTPCON.target.tmp` 
      do 

		echo 'File: ' ${CINT_TOP}/${REMOTE_FOLDER}/${file}
        echo "put ${file}"		>> $Batchfile
		#echo "rm ${file}"      >> $Batchfile
		echo "mv ${CINT_TOP}/${REMOTE_FOLDER}/${file} ${CINT_TOP}/archive/${file}-${TSTAMP}-arc" >> /tmp/$$.FTPCON.out.stream.tmp 
		#rm ${CINT_TOP}/${REMOTE_FOLDER}/${file}.pgp

      done 
	  echo "bye"                >> $Batchfile 
	
	fi
	  echo '-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'	

  /usr/bin/sftp -b $Batchfile -oPort=22  -oUser=${HL_QUALIFIER} ${MACHNAM} > /tmp/$$.FTPCON.tmp

 
  # --> Starting connection ERROR checking 

  # --> Error Check: The connection to the server was lost.
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Connection lost"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, The connection to the server was lost." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
 fi 
 
  # --> Error Check: There is no connection to the server.
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "No connection"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
   msg "\n--> ERROR, ${MACHNAM}, There is no connection to the server." 
    error_exit 
  else 
    msg "--> Control Connection appears ok" -d 
  fi 
 
  # --> Error Check: A badly formatted packet or other SFTP protocol incompatibility was detected.
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Bad message"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, A badly formatted packet or other SFTP protocol incompatibility was detected." 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
  
  # --> Error Check: An error occurred, but no specific error code exists to describe the failure.
  error_handle=`cat /tmp/$$.FTPCON.tmp|grep "Failure"|wc -l` 
  if [ "${error_handle}" -gt 0 ] 
  then  
    msg "\n--> ERROR, ${MACHNAM}, An error occurred, but no specific error code exists to describe the failure." 
    error_exit 
  else 
    msg "--> Finding Machine, ok" -d 
  fi 
  
  msg "........................................................................" 
  msg "Below is the datastream to be executed :\n" 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  chmod u+x /tmp/$$.FTPCON.out.stream.tmp 
  msg "........................................................................" 
  cp /tmp/$$.FTPCON.out.stream.tmp /tmp/ppn
  msg "Running stream to UNIX on ${MACHNAM} to process moves and archives ...\n" 
    `/tmp/$$.FTPCON.out.stream.tmp` 
  cat_msg /tmp/$$.FTPCON.out.stream.tmp 
  `/tmp/$$.FTPCON.tmp` 
  cat_msg /tmp/$$.FTPCON.tmp
  msg "........................................................................" 
 
fi 
echo 'end outbound_globalscape'   
} 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
# <<<<<<<<<<<<<<<<<<<<<<<<<< M A I N  * * * L I N E >>>>>>>>>>>>>>>>>>>>>>>>>>>>>0 
# 
# <---------------------------- Validate and Process Passed Arguments ----------> 
#  
 
case "${num_args}" in  
0) echo "ERROR-Wrong number of arguments">>/tmp/$$.run.log 
   echo "\n      I'm going to exit." \ 
    >>/tmp/$$.run.log 
    echo "\n\nDone `date`.\n">>/tmp/$$.run.log 
    error_exit;; 
1) # assume SRS or only one parm i.e. Suffix 
    if [ `echo ${in_args}|awk '{ print $1 }'` = "FTPCON" ] 
    then  
      RUN_MODE="SRS" 
      srs=${in_args} 
    else 
      RUN_MODE="OS" 
      INT_SUFFIX=`echo ${in_args}|awk '{ print $1 }'` 
    fi;; 
2) if [ ${1} = "-dd" ] 
     then 
       diagnostic="detail" 
       INT_SUFFIX=${2} 
       RUN_MODE="OS" 
     else 
    if [ "${1}" = "-d" ] 
    then 
      diagnostic="standard" 
      INT_SUFFIX=${2} 
      RUN_MODE="OS" 
    else 
      INT_SUFFIX=${2} 
      RUN_MODE="OS" 
    fi 
    fi;; 
esac  
 
 
# 
# 
# <--------------------------- Main Code Line ---------------------------------> 
#  
 
 msg "Running: ${CINT_TOP}/bin/FTPCON" 
 msg "\n`date`\n" 
  diagnostic=`echo ${srs}|awk '{ print $14 }'|sed -e s/\"//g` 
  if [ "${diagnostic}" = "detail" ] 
  then 
   msg "DETAILED DIAGNOSTICS ENABLED\n\n" 
   msg "NOTE-To turn off diagnostics, do not use the detail (-dd) option\n";msg 
  else 
    if [ "${diagnostic}" = "standard" ] 
    then 
     msg "STANDARD DIAGNOSTICS ENABLED\n\n" 
     msg "NOTE-To turn off diagnostics, do not use the standard (-d) option\n"  
     msg "Running: ${CINT_TOP}/int/bin/FTPCON" 
     msg "\n`date`\n" 
    fi 
  fi 
if [ "${RUN_MODE}" = "SRS" ] 
then 
msg "------------ Standard Report Submission Parameters -----------------------" 
FCP_SHORT_NAME=`echo ${in_args}|awk '{ print $1 }'|sed -e s/\"//g|sed -e s/FCP_SHORT_NAME=//g` 
echo "Program Name.................: ${FCP_SHORT_NAME}" 
FCP_REQID=`echo ${in_args}|awk '{ print $2 }'|sed -e s/\"//g|sed -e s/FCP_REQID=//g` 
echo "Request Id...................: ${FCP_REQID}" 
FCP_LOGIN=`echo ${in_args}|awk '{ print $3 }'|sed -e s/\"//g|sed -e s/FCP_LOGIN=//g`
echo "Login........................: apps/*******" 
FCP_USERID=`echo ${in_args}|awk '{ print $4 }'|sed -e s/\"//g|sed -e s/FCP_USERID=//g` 
echo "Userid.......................: ${FCP_USERID}" 
FCP_USERNAME=`echo ${in_args}|awk '{ print $5 }'|sed -e s/\"//g|sed -e s/FCP_USERNAME=//g` 
echo "Username.....................: ${FCP_USERNAME}" 
FCP_PRINTER=`echo ${in_args}|awk '{ print $6 }'|sed -e s/\"//g|sed -e s/FCP_PRINTER=//g` 
echo "Printer......................: ${FCP_PRINTER}" 
FCP_SAVE_OUT=`echo ${in_args}|awk '{ print $7 }'|sed -e s/\"//g|sed -e s/FCP_SAVE_OUT=//g` 
echo "Save Output..................: ${FCP_SAVE_OUT}" 
FCP_NUM_COPIES=`echo ${in_args}|awk '{ print $8 }'|sed -e s/\"//g|sed -e s/FCP_NUM_COPIES=//g` 
echo "Number Copies................: ${FCP_NUM_COPIES}" 
HL_QUALIFIER=`echo ${in_args}|awk '{ print $9 }'|sed -e s/\"//g` 
echo "High Level Qualifier.........: ${HL_QUALIFIER}" 
 
PROCESS=`echo ${in_args}|awk '{ print $10}'|sed -e s/\"//g` 
echo "Feeds to Process.............: ${PROCESS}" 
 
STYLE=`echo ${in_args}|awk '{ print $11}'|sed -e s/\"//g` 
echo "Connection Style.............: ${STYLE}" 
 
MACHNAM=`echo ${in_args}|awk '{ print $12}'|sed -e s/\"//g` 
echo "Machine/Node Name............: ${MACHNAM}" 
 
MAILTO=`echo ${in_args}|awk '{ print $13}'|sed -e s/\"//g` 
echo "Mail To......................: ${MAILTO}" 

# TJT 6 Feb, 2002
FEED_SUFFIX=`echo ${in_args}|awk '{ print $15}'|sed -e s/\"//g` 
echo "Feed Suffix..................: ${FEED_SUFFIX}" 

# RQ 26-Sep-2016
REMOTE_FOLDER=`echo ${in_args}|awk '{ print $16}'|sed -e s/\"//g` 
echo "Remote Folder................: ${REMOTE_FOLDER}" 

# NI 03-Oct-2016
ENCRYPTED=`echo ${in_args}|awk '{ print $17}'|sed -e s/\"//g` 
echo "Encrypted....................: ${ENCRYPTED}" 

RECIPIENT=`echo ${in_args}|awk '{ print $18}'|sed -e s/\"//g` 
echo "Recipient ...................: ${RECIPIENT}" 
 
msg "Diagnostic...................: ${diagnostic}" 
  
msg "--------------------------------------------------------------------------" 
fi 
msg "\nINFO: Running from ${RUN_MODE}.\n" 
msg "\nINFO: Running Base Version: ${base_version}.\n" 
msg "\nINFO: Running Site Version: ${site_version}.\n" 
msg "\nINFO: ${LOGNAME}'s home: ${HOME}.\n" 
 
if [ "${MAILTO}" = "NONE" ] 
then 
  MAILTO="" 
fi 
 
 
# --> Check to see if we are already running, if so... exit 
 
# @@@ add OR 
 
if [ "`$CINT_TOP/bin/psgrep FTPCON|grep -v vi|wc -l`" -gt 3 ] 
then 
    msg "\nERROR-An instance of FTPCON is already running," -d 
    msg "\n      I'm going to exit." -d 
    msg "\n\nDone `date`.\n" -d 
    normal_exit 
fi 
 
case "${PROCESS}" in 
    Inbound) case "${STYLE}" in 
        MVS)  inbound_mvs ;; 
        VMS)  inbound_vms ;; 
          AS400)  inbound_as400 ;; 
        UNIX) inbound_unix;; 
	   EFSSFTP) inbound_globalscape;; 
	   #BEELINESFTP) beeline_inbound_globalscape;; 	   
 	   #BEELINEAPSFTP) beeline_ap_inbound_globalscape;; 	   
            UNIXSFTP) inbound_sftp;; 
          Tandem) inbound_tandem;; 
         NT3) inbound_nt3;; 
         NT4) inbound_nt4;; 
         esac;; 
   Outbound) case "${STYLE}" in 
        MVS)  outbound_mvs;; 
        VMS)  outbound_vms ;; 
          AS400)  outbound_as400 ;; 
           UNIX)  outbound_unix;; 
		   EFSSFTP) outbound_globalscape;; 
		   #BEELINESFTP) beeline_outbound_globalscape;; 		   
         Tandem)  outbound_tandem;; 
         NT3) outbound_nt3;; 
         NT4) outbound_nt4;; 
	 SBX) outbound_sbx;;
         esac;; 
       Both) case "${STYLE}" in 
        MVS)  inbound_mvs 
              outbound_mvs;; 
        VMS)  inbound_vms 
              outbound_vms;; 
          AS400)  inbound_as400  
              outbound_as400 ;; 
           UNIX)  inbound_unix 
              outbound_unix;; 
          Tandem) inbound_tandem 
              outbound_tandem;; 
         NT3) inbound_nt3; 
              outbound_nt3;; 
         NT4) inbound_nt4; 
              outbound_nt4;; 
         esac;; 
      *) msg "ERROR - Unknown ${TYPE} Feed type of ${PROCESS} requested.";; 
esac 
 
normal_exit 
 
exit 0 


# ==== EOF ===================================================================. 